#include "bsp.h"

                MODULE    API
                PUBLIC    Binar, OneLED, PWM ;IncLED, DecLED,
                EXTERN    PrintLEDs, ClrLEDs
                EXTERN    delay, state

                RSEG      CODE
          
;----------------------------------------------------------------------------------------------
;             LEDs Increment counting  
;----------------------------------------------------------------------------------------------
;IncLED         inc.b   LEDsArrPort
;               ret
;----------------------------------------------------------------------------------------------
;             LEDs Decrement counting
;----------------------------------------------------------------------------------------------
;DecLED         dec.b   LEDsArrPort
;               ret
;----------------------------------------------------------------------------------------------
;             LEDs Skip counting
;----------------------------------------------------------------------------------------------
;RlaLED         rla.b   LEDsArrPort
;               ret               
;----------------------------------------------------------------------------------------------
;             Binar counting  //need to add - save value of where it stopped and 10 sec limit
;----------------------------------------------------------------------------------------------
Binar          mov.b   #0x14, R7      ;check if correct value for 10sec
               call    #ClrLEDs
               push    R10            ;continue where it stopped              
               call    #PrintLEDs
               jmp     Subloop1
Sub1           dec.b   R7
               jz      Q2
               push    #1
               call    #PrintLEDs
               push    #43690            ;delay 0.5sec
               call    #delay
Subloop1       cmp.b   #0xFF,LEDsArrPort  
               jz      Sub1
               inc.b   LEDsArrPort
               push    #43690            ;delay 0.5sec
               call    #delay
               dec.b   R7
               jz      Q1           
               cmp     #1,R9
               jz      Subloop1
               
Q1             mov.b   LEDsArrPort,R10
               mov     #0,R9
               ret
;----------------------------------------------------------------------------------------------
;             One by one   
;----------------------------------------------------------------------------------------------
OneLED       mov.b   #0x0e, R7        ;14*0.5 sec = 7sec / amount of loops to get 7sec
             push    R11              ;continue where it stopped
             call    #PrintLEDs
             jmp     Subloop2
Sub2         dec.b   R7
             jz      Q2
             push    #1
             call    #PrintLEDs
             push    #43690            ;delay 0.5sec
             call    #delay

Subloop2     cmp.b   #0x80,LEDsArrPort ;check if last LED
             jz      Sub2
             push    #43690            ;delay 0.5sec
             call    #delay
             rla.b   LEDsArrPort
             dec.b   R7
             jz      Q2
             cmp     #2,R9
             jz      Subloop2
             
             
Q2           mov.b   LEDsArrPort,R11   ;save where is stopped
             mov     #0,R9
             ret    
             
;----------------------------------------------------------------------------------------------
;             PWM - 4kHz with duty cycle 75% from P2.7OUT - 64 delay per operation and using XOR
;----------------------------------------------------------------------------------------------             
PWM         mov.b   #0x80, R12
L1          push    #5
            call    #delay
            xor.b   #0x80, SWsArrPort
            push    #5
            call    #delay
            add.b   R12, SWsArrPort
            jmp     L1           
            cmp     #3,R9
            jz      L1
            
Q3          mov     #0,R9
            ret    
     
     
            ENDMOD
;----------------------------------------------------------------------------------------------
;            MODULE  Delay
;            PUBLIC  Delay_05sec
;            RSEG    CODE
;            
;Delay_05sec mov     #4, R6    
;loopD       mov.w   #43550,R5                 ; Delay of 0.5 sec  
;L           dec.w   R5                        ; Decrement R5
;            jnz     L                         ; Delay over?, jump if not zero(if bit Z in SR isn't zero from the last command)
;            dec     R6
;            jnz     loopD
;            ret
            
;            ENDMOD
;---------------------------------------------------------------------------------------------- 
               
               END